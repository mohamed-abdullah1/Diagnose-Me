// <auto-generated />
using System;
using MedicalServices.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalServices.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230311191325_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MedicalServices.Domain.Entities.Check", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 917, DateTimeKind.Utc).AddTicks(7152));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MedicalRecordId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Checks", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Clinic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 919, DateTimeKind.Utc).AddTicks(1125));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Clinics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100fffa3-2f7e-0255-e693-9c2a0f6a42da",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dental Clinic",
                            PictureUrl = "",
                            Specialization = "Dental"
                        });
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.ClinicAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 918, DateTimeKind.Utc).AddTicks(4311));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("ProfilPictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicAddresses", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 923, DateTimeKind.Utc).AddTicks(44));

                    b.Property<bool>("IsLicenseVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "657cb6cb-abf2-00d1-5d46-939a7b3aff5f",
                            Bio = "I am a doctor",
                            ClinicId = "100fffa3-2f7e-0255-e693-9c2a0f6a42da",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLicenseVerified = true,
                            License = "123456789",
                            Title = "Dr"
                        });
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.DoctorClinicAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClinicAddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAddressId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorClinicAddress");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.DoctorRate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 923, DateTimeKind.Utc).AddTicks(9815));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorRates", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 919, DateTimeKind.Utc).AddTicks(5135));

                    b.Property<string>("Diagnoses")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Illness")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Medicine", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Concentration")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 920, DateTimeKind.Utc).AddTicks(5629));

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicalRecordId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Medicines", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Patient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 925, DateTimeKind.Utc).AddTicks(990));

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "972a1201-a9dc-2127-0827-560cb7d76af8",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 1.7f,
                            Weight = 70f
                        });
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.PatientDoctor", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientDoctors", (string)null);
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 3, 11, 19, 13, 24, 921, DateTimeKind.Utc).AddTicks(2088));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "972a1201-a9dc-2127-0827-560cb7d76af8",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Patient",
                            IsDoctor = false,
                            Name = "Patient",
                            ProfilePictureUrl = ""
                        },
                        new
                        {
                            Id = "657cb6cb-abf2-00d1-5d46-939a7b3aff5f",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Doctor",
                            IsDoctor = false,
                            Name = "Doctor",
                            ProfilePictureUrl = ""
                        },
                        new
                        {
                            Id = "00edafe3-b047-5980-d0fa-da10f400c1e5",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Admin",
                            IsDoctor = false,
                            Name = "Admin",
                            ProfilePictureUrl = ""
                        });
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Check", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("Checks")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.ClinicAddress", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.Clinic", "Clinic")
                        .WithMany("ClinicAddresses")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalServices.Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.DoctorClinicAddress", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.ClinicAddress", "ClinicAddress")
                        .WithMany("DoctorClinicAddresses")
                        .HasForeignKey("ClinicAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorClinicAddresses")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAddress");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.DoctorRate", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorRates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Domain.Entities.Patient", "Patient")
                        .WithMany("DoctorRates")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Medicine", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Patient", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedicalServices.Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.PatientDoctor", b =>
                {
                    b.HasOne("MedicalServices.Domain.Entities.Doctor", "Doctor")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalServices.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicAddresses");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.ClinicAddress", b =>
                {
                    b.Navigation("DoctorClinicAddresses");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorClinicAddresses");

                    b.Navigation("DoctorRates");

                    b.Navigation("MedicalRecords");

                    b.Navigation("PatientDoctors");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.MedicalRecord", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.Patient", b =>
                {
                    b.Navigation("DoctorRates");

                    b.Navigation("MedicalRecords");

                    b.Navigation("PatientDoctors");
                });

            modelBuilder.Entity("MedicalServices.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
